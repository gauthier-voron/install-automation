#!/usr/bin/bash


source 'install-scripts/common/temp'
source 'install-scripts/common/ui'


# find_partition_of_disk <disk> <part-num> <output-var>
# Find the partition <part-num> of the specified <disk> and store the result in
# the specified <output-var> variable.
# Try do find the partition automatically but may ask user's help in last
# resort.
find_partition_of_disk()
{
    local disk="$1" ; shift
    local pnum="$1" ; shift
    local output="$1" ; shift
    local part

    # If the disk path ends with a number, add the 'p' character followed by
    # the partition number. Otherwise, just append the partition number.
    if echo "$disk" | grep -qP '\d$' ; then
	part="${disk}p${pnum}"
    else
	part="${disk}${pnum}"
    fi

    # If the partition does not exist, then ask the user to fix the problem by
    # dropping him into a shell.
    if [ ! -e "$part" ] ; then
	ask_help part \
		 "Cannot find partition $pnum of disk '$disk'" \
		 "Please call 'answer <partition-path>' to continue"
    fi

    # If even the user is unable to find the partition path, there is nothing
    # we can do.
    if [ ! -e "$part" ] ; then
	error "Invalid partition path, aborting"
    fi

    # Put the partition path in the output variable.
    eval "$output=\"$part\""
}

# prepare_partitions <disk-path> <swap> <root>
# Create the partition scheme for a virtual computer on the specified disk.
# This function creates a swap and a root partitions. The path of each of
# these partitions is stored inside variables with the names specified with
# the two last arguments.
prepare_partitions()
{
    local disk="$1" ; shift
    local swapvar="$1" ; shift
    local rootvar="$1" ; shift
    local swappart rootpart

    info "Create partition table on '$disk'"
    {
    	# Qemu only handles BIOS partition tables
    	printf 'label: dos\n'

    	# The first partition is the /swap partition.
    	printf 'size=1G, type=%s\n' "82"

	# The second partition is the bootable / partition.
    	printf 'bootable, type=%s\n' "83"
    } | sfdisk -q "$disk"

    info "Wait for kernel update ..."
    sleep 1

    # Assign the swap output variable to the name of the first partition.
    find_partition_of_disk "$disk" '1' swappart
    info "Associate partition '$swappart' with 'swap'"
    eval "$swapvar='$swappart'"

    # Assign the root output variable to the name of the second partition.
    find_partition_of_disk "$disk" '2' rootpart
    info "Associate partition '$rootpart' with '/'"
    eval "$rootvar='$rootpart'"
}


# format_partitions <swap> <root>
# Format and mount the partitions of the system.
format_partitions()
{
    local swap="$1" ; shift
    local root="$1" ; shift

    # Be sure that the root partition is unmounted before to format it.
    umount "$root" 2> /dev/null || true

    # Also unmount the swap partition.
    swapoff "$swap" 2>/dev/null || true

    # Format the partitions with the appropriate type.
    info "Format all partitions"
    yes | mkswap "$swap" > /dev/null
    yes | mkfs.ext4 -q "$root"  # We choose ext4 instead of btrfs which is not
                                # well integrated

    # Now we can mount the partitions.
    info "Mount all partitions"
    mount  "$root"   '/mnt'
    swapon "$swap"
}

# check_partitions
# Check that the partitions are correctly created, formatted and mounted.
# Return if everything is correct, otherwise, print an error message and exits.
check_partitions()
{
    genfstab '/mnt' | grep '^[^#]' | while read part mountpoint type opts ; do
	case "$mountpoint" in
	    '/')
		if ! file "$part" | grep -q 'block special' ; then
		    error "Root partition not a block device '$part'"
		elif [ "$type" != 'ext4' ] ; then
		    error "Root partition has invalid type '$type'"
		fi
		;;
	    'none')
		if ! file "$part" | grep -q 'block special' ; then
		    error "Swap partition not a block device '$part'"
		elif [ "$type" != 'swap' ] ; then
		    error "Swap partition has invalid type '$type'"
		fi
		;;
	    *)
		error "Unexpected partition mounted '$part' on '$mountpoint'"
		;;
	esac
    done

    if [ $(genfstab '/mnt' | grep '^[^#]' | wc -l) -ne 2 ] ; then
	if ! genfstab '/mnt' | grep '^[^#]' | grep -qP '\s/\s' ; then
	    error "Missing root partition"
	elif ! genfstab '/mnt' | grep '^[^#]' | grep -qP '\snone\s' ; then
	    error "Missing swap partition"
	else
	    error "Missing partition but cannot find which one"
	fi
    fi
}
